@model Deadit.Lib.Domain.ViewModel.PostPageViewModel
@using Deadit.Lib.Domain.Constants
@using Deadit.Lib.Domain.Enum
@using Deadit.Lib.Domain.TableView
@using Deadit.Lib.Utility
@using Microsoft.AspNetCore.Http.Extensions;

<div class="container">

    <div class="card card-post-content">
        
        <div class="card-header">

            <div class="d-flex justify-content-between">
                <div class="d-flex">

                    @* Votes *@
                    <div class="item-voting me-3" data-current-vote="@Model.UserPostVote">

                        @{
                            if (Model.IsLoggedIn && !Model.Post.PostDeletedOn.HasValue)
                            {
                                <button class="btn btn-sm btn-reset btn-vote btn-vote-up" title="Upvote" type="button">
                                    @if (Model.UserPostVote == VoteType.Upvote)
                                    {
                                        @Html.Raw(VoteButtonIconsSolid.Upvote)
                                    }
                                    else
                                    {
                                        @Html.Raw(VoteButtonIcons.Upvote)
                                    }
                                </button>

                                <div class="item-voting-score">@Model.Post.VotesScore</div>


                                <button class="btn btn-sm btn-reset btn-vote btn-vote-down" title="Downvote" type="button">
                                    @if (Model.UserPostVote == VoteType.Downvote)
                                    {
                                        @Html.Raw(VoteButtonIconsSolid.Downvote)
                                    }
                                    else
                                    {
                                        @Html.Raw(VoteButtonIcons.Downvote)
                                    }
                                </button>
                            }
                            else
                            {
                                <button disabled class="btn btn-sm btn-reset btn-vote btn-vote-up" title="Upvote" type="button">@Html.Raw(VoteButtonIcons.Upvote)</button>
                                <div class="item-voting-score">@Model.Post.VotesScore</div>
                                <button disabled class="btn btn-sm btn-reset btn-vote btn-vote-down" title="Downvote" type="button">@Html.Raw(VoteButtonIcons.Downvote)</button>
                            }
                        }

                    </div>

                    @* Post metadata *@
                    <div>
                        <div class="d-flex">
         
                            <div class="post-title">
                                <h2>@Model.Post.PostTitle</h2>
                            </div>
                        </div>

                            
                        @if(Model.Post.FlairPostColor is string flairColor)
                        {
                            var backgroundColor = $"background-color: {flairColor};";
                            var foregroundColor = $"color: {ColorUtility.GetForegroundColor(flairColor!)};";

                            <div class="post-flair mb-1">
                                <span class="badge" style="@backgroundColor @foregroundColor">New</span>
                            </div>
                        }

                        <div class="post-created-on">@Model.Post.PostType?.GetIconHtml() Submitted @Model.Post.CreatedOnDifferenceDisplay ago</div>
                        <div class="post-count-comments">@NumberUtilities.FormatNumberWithCommas(Model.Post.PostCountComments) comments</div>
                    </div>

                </div>

                @* Dropdown menus *@
                <div class="d-flex justify-content-around align-items-baseline">


                    @* Moderation actions *@
                    @if(Model.IsCommunityModerator)
                    {
                        <div class="dropdown dropstart dropdown-post-moderation">
                            <button class="btn btn-sm p-1 btn-reset" type="button" data-bs-toggle="dropdown" aria-expanded="false" title="Moderation tools">
                                <i class="bx bx-shield"></i>
                            </button>
                            <ul class="dropdown-menu">
                                
                                @if(Model.Post.PostIsLocked)
                                {
                                    <li><button class="dropdown-item" type="button" data-js-action="Unlock" title="Unlock this post">Unlock</button></li>
                                }
                                else
                                {
                                    <li><button class="dropdown-item" type="button" data-js-action="Lock" title="Lock this post (prevent additional comments)">Lock</button></li>
                                }

                                @if(Model.Post.PostIsRemoved)
                                {
                                    <li><button class="dropdown-item" type="button" data-js-action="Restore" title="Restore this post">Restore</button></li>
                                }
                                else
                                {
                                    <li><button class="dropdown-item" type="button" data-js-action="Remove" title="Unlock this post (hide this post's content)">Remove</button></li>
                                }
                            </ul>
                        </div>
                    }


                    @* Post actions *@
                    @if(Model.IsLoggedIn)
                    {
                        <div class="dropdown dropstart dropdown-post">
                            <button class="btn btn-sm p-1 btn-reset" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bx bx-dots-horizontal-rounded"></i>
                            </button>
                            <ul class="dropdown-menu">

                                <li><button class="dropdown-item" type="button" data-js-action="Save">Save</button></li>

                                @if (Model.IsPostAuthor)
                                {
                                    <li><hr class="dropdown-divider"></li>

                                    if (!Model.Post.PostIsRemoved)
                                    {
                                        <li><button class="dropdown-item" type="button" data-js-action="Edit">Edit</button></li>
                                    }

                                    <li><button class="dropdown-item" type="button" data-js-action="Delete">Delete</button></li>
                                }
                            </ul>
                        </div>
                    }

                </div>
            </div>


        </div>
        
        <div class="card-body">

            <div class="post-content">

                <div class="post-content-display">

                    @if(Model.Post.PostType == PostType.Text)
                    {
                        <div class="md">
                            @MarkdownUtility.ToHtmlContent(Model.Post.PostBodyContent ?? string.Empty)
                        </div>
                    }
                    else
                    {
                        <a href="@Model.Post.PostBodyContent" target="_blank">@Model.Post.PostBodyContent</a>
                    }

                </div>


                @if (Model.IsPostAuthor && Model.Post is ViewPostText textPost)
                {

                    <div class="post-content-edit">

                        <form class="edit-post-form">

                            @* Content *@
                            <div class="input-feedback">
                                <label class="form-label-container">
                                    <textarea class="form-control input-feedback-input" name="content" rows="8" required>@textPost.PostContent</textarea>
                                    <div class="valid-feedback"></div>
                                    <div class="invalid-feedback"></div>
                                </label>
                            </div>

                            <div class="d-flex mt-2">
                                <button type="submit" class="btn btn-sm btn-success btn-submit me-1">Save changes</button>
                                <button type="button" class="btn btn-sm btn-outline-danger btn-cancel">Cancel</button>
                            </div>

                        </form>

                    </div>
                }
            </div>

        </div>
    </div>
</div>










